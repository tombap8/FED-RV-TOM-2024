{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AAChaAAa;AACb;AACA;AACA;AACA;AACA,EAAE;;;;;;;UC5PF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AAmBgC;AAChC;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,IAAI,wBAAwB,EAAE,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6CAAO;AAC5C;AACA,YAAY,oDAAU,CAAC,6CAAO,EAAE,0CAAI;AACpC;AACA,YAAY,oDAAU,CAAC,6CAAO,EAAE,0CAAI;AACpC;AACA,YAAY,oDAAU,CAAC,6CAAO,EAAE,0CAAI;AACpC;AACA,YAAY,6DAAmB,CAAC,6CAAO;AACvC;AACA,YAAY,qDAAW,CAAC,6CAAO,EAAE,2CAAK;AACtC;AACA,YAAY,qDAAW,CAAC,6CAAO,EAAE,2CAAK;AACtC;AACA,YAAY,qDAAW,CAAC,6CAAO,EAAE,2CAAK;AACtC;AACA,YAAY,iDAAW;AACvB;AACA,yBAAyB,6DAAmB,CAAC,6CAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,6CAAO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAW;AAChC;AACA;AACA;AACA,2BAA2B,SAAS;AACpC,iBAAiB,QAAQ;AACzB,kBAAkB,SAAS;AAC3B,kBAAkB,SAAS;AAC3B,oBAAoB,sBAAsB;AAC1C,mBAAmB,eAAe;AAClC,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA,CAAC,GAAG","sources":["webpack://9994.typescript/./src/devTeam.ts","webpack://9994.typescript/webpack/bootstrap","webpack://9994.typescript/webpack/runtime/define property getters","webpack://9994.typescript/webpack/runtime/hasOwnProperty shorthand","webpack://9994.typescript/webpack/runtime/make namespace object","webpack://9994.typescript/./src/index.ts"],"sourcesContent":["/**************************************\n🧩 실습 주제: “우리 개발팀 인력 관리 시스템”\n\n🧪 주요 학습 포인트\n\nTypeScript 기본 타입 정리\n인터페이스 / 타입 별칭 활용\n유니온, 인터섹션, 튜플, enum 실전 적용\n함수 선언 및 타입 지정\n배열과 객체의 타입 구조 연습\n\n💼 시나리오 설정\n\n\"웹개발 회사의 개발자 인력을 정리하고\n관리하는 시스템을 만든다.\"\n\n예제 컨셉\nDeveloper 라는 타입을 만들어서 다양한 개발자들을 표현\n\n개발자들은 각자 역할(Frontend, Backend, Fullstack),\n스킬, 프로젝트 참여 여부 등 정보 가짐\n이 정보를 배열로 관리하고, 필터링하거나 콘솔에 출력\n타입 안정성 유지하면서 함수도 타입화함\n\n📖 데이터 및 함수 정의\n\n((타입정의))\nRole: 개발자의 역할을 정의한 타입으로,\n\"Frontend\", \"Backend\", \"Fullstack\" 중\n하나만 가능합니다.\n이 타입은 개발자 객체에서 role에 사용됩니다.\n\n((타입정의))\nDeveloper: 개발자에 대한 정보를\n나타내는 타입으로,\n이름, 나이, 역할, 기술, 활동 여부 등의\n속성을 가집니다.\n\n((데이터 셋팅 배열변수))\ndevTeam: 개발자 배열로, 여러 명의 개발자\n정보를 포함하고 있습니다.\n각 개발자는 Developer 타입을 따릅니다.\n\n((함수 정의))\ngetActiveDevelopers:\n활동 중인 개발자만 추출하는 함수로,\nisActive 속성이 true인 개발자들만 반환합니다.\n\n((함수 정의))\nfindBySkill:\n특정 기술(skill)을 가진 개발자들만 추출하는 함수로,\n각 개발자의 skills 배열에 주어진 기술이\n포함된 경우만 반환합니다.\n\n**************************************/\n// 참고 : 타입은 파스칼케이스로 정의하고\n// export로 개별적 내보내기 가능함!\n// 🤹‍♀️ 1. \"역할\"을 나타내는 타입 정의 + 내보내기 ///////\n// enum형으로 타입정의 : 이유는 값이 잘못 입력될 수 있기때문\nexport var Role;\n(function (Role) {\n    Role[\"Frontend\"] = \"Frontend\";\n    Role[\"Backend\"] = \"Backend\";\n    Role[\"Fullstack\"] = \"Fullstack\";\n})(Role || (Role = {}));\n// 🤹‍♀️ 3. 개발자 기술정보 셋팅 : 열거형 타입\nexport var Skill;\n(function (Skill) {\n    Skill[\"React\"] = \"React\";\n    Skill[\"NodeJs\"] = \"Node.js\";\n    Skill[\"TypeScript\"] = \"TypeScript\";\n    Skill[\"Express\"] = \"Express\";\n    Skill[\"MongoDB\"] = \"MongoDB\";\n    Skill[\"Sass\"] = \"Sass\";\n    Skill[\"VueJs\"] = \"VueJS\";\n})(Skill || (Skill = {}));\nexport const devTeam = [\n    {\n        name: \"김상중하\",\n        age: 30,\n        year: 20,\n        role: Role.Frontend,\n        skills: [Skill.React, Skill.NodeJs, Skill.TypeScript],\n        isActive: false,\n    },\n    {\n        name: \"이주현\",\n        age: 25,\n        year: 5,\n        role: Role.Backend,\n        skills: [Skill.NodeJs, Skill.VueJs, Skill.Express, Skill.MongoDB],\n        isActive: true,\n    },\n    {\n        name: \"김하루방\",\n        age: 32,\n        year: 10,\n        role: Role.Fullstack,\n        skills: [\n            Skill.React,\n            Skill.NodeJs,\n            Skill.TypeScript,\n            Skill.Express,\n            Skill.MongoDB,\n        ],\n        isActive: false,\n    },\n    {\n        name: \"조삼모사\",\n        age: 48,\n        year: 20,\n        role: Role.Frontend,\n        skills: [Skill.TypeScript, Skill.Sass],\n        isActive: false,\n    },\n    {\n        name: \"김한결\",\n        age: 27,\n        year: 5,\n        role: Role.Backend,\n        skills: [Skill.NodeJs, Skill.Express, Skill.MongoDB],\n        isActive: true,\n    },\n    {\n        name: \"이상민\",\n        age: 26,\n        year: 5,\n        role: Role.Fullstack,\n        skills: [\n            Skill.React,\n            Skill.NodeJs,\n            Skill.TypeScript,\n            Skill.Express,\n            Skill.MongoDB,\n        ],\n        isActive: true,\n    },\n    {\n        name: \"김하은\",\n        age: 24,\n        year: 3,\n        role: Role.Frontend,\n        skills: [Skill.React, Skill.Sass],\n        isActive: true,\n    },\n    {\n        name: \"이주호\",\n        age: 23,\n        year: 2,\n        role: Role.Backend,\n        skills: [Skill.NodeJs, Skill.Express, Skill.MongoDB],\n        isActive: true,\n    },\n    {\n        name: \"김상민\",\n        age: 29,\n        year: 8,\n        role: Role.Fullstack,\n        skills: [Skill.React, Skill.NodeJs, Skill.Express, Skill.MongoDB],\n        isActive: true,\n    },\n    {\n        name: \"박상현\",\n        age: 25,\n        year: 5,\n        role: Role.Backend,\n        skills: [Skill.NodeJs, Skill.Express, Skill.MongoDB],\n        isActive: true,\n    },\n];\n// 🤹‍♀️ 4. 활동중인 개발자 필터링 함수 정의 ///////\n// -> team 파라미터변수에 devTeam 배열을 받아서\n// 배열값의 객체속성중 isActive 속성값이 true인 개발자들만 반환\nexport function getActiveDevelopers(team // 팀원데이터\n) {\n    return team.filter((dev) => dev.isActive);\n} ////////// getActiveDevelopers 함수 //////////////\n// 🤹‍♀️ 5. 특정기술을 가진 개발자 필터링 함수 정의 ///////\n// -> team 파라미터변수에 devTeam 배열을 받아서\n// 배열값의 객체속성중 skills 속성값중\n// 해당 기술이 있는 개발자들만 반환\nexport function findBySkill(team, // 팀원데이터\nskill) {\n    return team.filter((dev) => dev.skills.includes(skill));\n} ////////// findBySkill 함수 //////////////\n// 🤹‍♀️ 6. 특정 역할을 가진 개발자 필터링 함수 정의 ///////\n// -> team 파라미터변수에 devTeam 배열을 받아서\n// 배열값의 객체속성중 role 속성값이\n// 파라미터로 받은 role과 같은 개발자들만 반환\nexport function findByRole(team, // 팀원데이터\nrole // 역할\n) {\n    return team.filter((dev) => dev.role === role);\n} ////////// findByRole 함수 //////////////\n// 위의 메니저 값 셋팅하기 /////\nexport const teamManager = {\n    name: \"박상현\",\n    teamSize: devTeam.length,\n    managerRoles: [Role.Frontend, Role.Backend],\n};\n// 8. 제네릭을 활용한 중급,고급 개발자 필터함수 만들기 ////\n// -> 기준 : 중고급 개발자는 경력 5년이상이다! \n// 기존에 경력년수가 없으므로 year 속성을 추가함!\nexport function getSeniorDevelopers(items, // 개발자 배열객체 데이터\nfilterFn // 검증함수\n) {\n    // 검증함수결과가 true인 배열값만 반환\n    return items.filter(filterFn);\n} ////////// getSeniorDevelopers 함수 //////////////\n// 9. 개발자 등급 열거형(enum)으로 정의하기 /////\nexport var DevLevel;\n(function (DevLevel) {\n    DevLevel[\"Junior\"] = \"Junior\";\n    DevLevel[\"Middle\"] = \"Middle\";\n    DevLevel[\"Senior\"] = \"Senior\";\n    DevLevel[\"Leader\"] = \"Leader\";\n})(DevLevel || (DevLevel = {}));\n// 10. 튜플을 활용한 등급별 보너스 정보배열 /////\nexport const levelBonusList = [\n    [DevLevel.Junior, 500],\n    [DevLevel.Middle, 1000],\n    [DevLevel.Senior, 2000],\n    [DevLevel.Leader, 3000],\n];\n// 11. 특정 개발자 경력에 따라 등급을 계산하는 함수 /////\nexport function getDevLevel(year) {\n    if (year >= 15)\n        return DevLevel.Leader;\n    if (year >= 8)\n        return DevLevel.Senior;\n    if (year >= 4)\n        return DevLevel.Middle;\n    return DevLevel.Junior;\n} ////////// getDevLevel 함수 //////////////\n// 12. 개발자 보너스 금액 조회 함수 /////////\nexport function getDevBonus(year) {\n    var _a;\n    // (1) 경력년수로 레벨 알아오기\n    const level = getDevLevel(year);\n    // (2) 레벨별 보너스 계산하기\n    const bonus = ((_a = levelBonusList.find((v) => v[0] === level)) === null || _a === void 0 ? void 0 : _a[1]) || 0;\n    // find로 찾은 값이 있으면.[1] 두번째 배열값 읽기\n    // 이값이 없으면 0을 할당\n    // -> 배열?.[순번] -> 배열일 경우 적용여부판단하는 구문\n    // ->>> 이런 방식을 옵셔널 체이닝이라고함!(배열없으면 undefined)\n    // -> 변수 = 값1 || 값2 ->>> 값1이 없을때 값2를 할당\n    // (1),(2) 결과값을 객체로 반환하기\n    return { level, bonus };\n    // -> 이 함수의 리턴값 타입은 중간에 개발시 변경될 수 있다!\n    // 따라서 타입지정은 하지않고\n    // 추론을 통해 자동으로 타입이 결정되도록 한다!\n    // -> ReturnType<typeof 함수명> 형식으로 사용가능하다!\n} ////////// getDevBonus 함수 //////////////\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// index.html에서 가장 먼저 불러오는 JS - index.ts\n// -> ts파일은 js파일로 컴파일 후 dist폴더에 bundle.js로 배포됨!\n// 외부 ts파일 불러오기 ////\nimport { \n// 개발자 기술\nSkill, \n// 개발자 역할\nRole, \n// 개발팀 배열\ndevTeam, \n// 팀 메니저 객체\nteamManager, \n// 활동 중인 개발자 필터 함수\ngetActiveDevelopers, \n// 특정 기술을 가진 개발자 필터 함수\nfindBySkill, \n// 특정 역할을 가진 개발자 필터 함수\nfindByRole, \n// 중고급 개발자 필터 함수\ngetSeniorDevelopers, \n// 개발자 보너스 함수\ngetDevBonus, } from \"./devTeam\";\nfunction greet(name) {\n    return `안녕, ${name}~!`;\n}\nconsole.log(greet(\"찐친 개발자\"));\nconsole.log(greet(\"타입스크립트\"));\nconsole.log(greet(\"JS 개발자\"));\nconsole.log(greet(\"코딩의 신\"));\n// 1. 기본타입 선언\nconst userName = \"김상중하\";\nconst age = 20;\nconst isActive = true;\nconsole.log(\"😎 기본타입\");\nconsole.log(userName, age, isActive);\n// 2. 배열 타입 선언\nconst numbers = [1, 2, 3, 4, 5];\nconst names = [\"찐친\", \"타입스크립트\", \"JS\", \"코딩의 신\"];\nconsole.log(\"😎 배열타입\");\nconsole.log(numbers);\nconsole.log(names);\n// 3. 튜플 (Tuple) 타입 선언\nconst userInfo = [\"김상중하\", 20];\nconsole.log(\"😎 튜플타입\");\nconsole.log(userInfo);\n// 4. 유니온 타입 선언\nconst unionType = \"loading\";\nconsole.log(\"😎 유니온타입\");\nconsole.log(unionType);\n// 위의 데이터 형을 적용한 새로운 변수선언 할당\nconst user1 = {\n    name: \"Alice\",\n    age: 25,\n};\nconst user2 = {\n    name: \"Bob\",\n    age: 30,\n    isActive: true,\n};\nconst user3 = {\n    name: \"Charlie\",\n    age: 35,\n    isActive: false,\n};\nconsole.log(\"😎 객체타입\");\nconsole.log(user1);\nconsole.log(user2);\nconsole.log(user3);\n// 6. 함수에 타입 선언\nfunction sayGoodBye(name, isOpt, message // 선택적 매개변수는 맨끝에 위치함\n) {\n    return `${name}! ${message ? message : \"\"} ${isOpt ? \"잘가!\" : \"안녕!\"} `;\n}\nconsole.log(\"😎 함수타입\");\nconsole.log(sayGoodBye(\"찐친 개발자\", true));\nconsole.log(sayGoodBye(\"타입스크립트\", true, \"완전멋쪄!\"));\nconsole.log(sayGoodBye(\"JS 개발자\", false));\nconsole.log(sayGoodBye(\"코딩의 신\", false, \"하이!\"));\n// 7. void 함수 : 리턴값이 없는 함수\nfunction logMessage(msg) {\n    console.log(\"🍊\", msg);\n}\nconsole.log(\"😎 void 함수\");\nlogMessage(\"코딩의 신\");\nlogMessage(\"타입스크립트\");\n// 인터섹션 타입을 적용한 새로운 변수선언 할당\nconst employee1 = {\n    name: \"조삼모사\",\n    company: \"한국교통공사\",\n};\nconst employee2 = {\n    name: \"김하루방\",\n    company: \"삼성전자\",\n};\nconsole.log(\"😎 인터섹션타입\");\nconsole.log(employee1);\nconsole.log(employee2);\n// 결국 인터섹션은 타입을 여러개 동시에 적용하는 것!\nconst student1 = {\n    name: \"강상모\",\n    home: \"서울\",\n    age: 20,\n};\nconst student2 = {\n    name: \"갈매기\",\n    home: \"부산\",\n    age: 21,\n};\nconsole.log(\"😎 인터섹션타입\");\nconsole.log(student1);\nconsole.log(student2);\n// 9. enum 타입 선언\n// -> 상수 데이터를 안정적으로 쓰기 위한 타입\n// -> 이놈(enum)! 에러잡아!\nvar AISystem;\n(function (AISystem) {\n    AISystem[\"Cgpt\"] = \"Chat GPT\";\n    AISystem[\"DallE\"] = \"DALL-E\";\n    AISystem[\"MidJourney\"] = \"MidJourney\";\n    AISystem[\"StableDiffusion\"] = \"Stable Diffusion\";\n    AISystem[\"Cop\"] = \"Copilot\";\n})(AISystem || (AISystem = {}));\nconsole.log(\"😎 enum타입\");\nconsole.log(AISystem.Cgpt);\nconsole.log(AISystem.DallE);\nconsole.log(AISystem.MidJourney);\nconsole.log(AISystem.StableDiffusion);\nconsole.log(AISystem.Cop);\n// 10. 제네릭(Generics) 타입 함수에 적용하기\n// -> 타입을 외부에서 유연하게 전달받을 수 있는 방식\n// 배열요소 콘솔 출력 제네릭함수\nfunction printArray(arr) {\n    console.log(\"😎 제네릭타입\");\n    arr.forEach((val, idx) => {\n        console.log(idx, '번째 : ', val);\n    });\n} //////// printArray 제네릭 함수 //////\n// 숫자 배열 제네릭함수 호출예\nconst numberArray = [1000, 2000, 3000, 4000, 5000];\n// 제네릭 함수 호출시 형을 지정하여 호출하기\n// printArray<number>(numberArray);\n// 데이터 형을 지정하지 않아도 자동으로 형을 감지한다!(타입추론)\nprintArray(numberArray);\n// 문자 배열 제네릭함수 호출예\nconst stringArray = [\"코딩의 신\", \"타입스크립트\", \"리액트\"];\nprintArray(stringArray);\n// 사용자정보 전달 : 객체를 변수에 할당함! ////\nconst userResponse = {\n    data: { name: \"강상모\", age: 20 },\n    success: true,\n};\nconsole.log(\"😎 제네릭타입\");\nconsole.log(userResponse);\n// 해당타입을 사용하는 변수\nconst farewellMessage = sayGoodBye(\"난 개발천재야!\", true, \"정말로 굿바이~~!\");\nconsole.log(\"😎 제네릭 ReturnType\");\nconsole.log(farewellMessage);\n// ★★★★★★★★★★★★★★★★★★★★★ //\n// 개발자 회사 샘플 찍어보기 //////////////////\n// ★★★★★★★★★★★★★★★★★★★★★ //\nconsole.log(\"😎 개발자 회사 샘플 찍어보기\");\nconsole.log(\"👷‍♀️🦸‍♀️전체 개발자 리스트:\", devTeam);\nconsole.log(\"👷‍♀️🦸‍♀️Frontend 개발자 리스트:\");\nconsole.log(findByRole(devTeam, Role.Frontend));\nconsole.log(\"👷‍♀️🦸‍♀️Backend 개발자 리스트:\");\nconsole.log(findByRole(devTeam, Role.Backend));\nconsole.log(\"👷‍♀️🦸‍♀️Fullstack 개발자 리스트:\");\nconsole.log(findByRole(devTeam, Role.Fullstack));\nconsole.log(\"👷‍♀️🦸‍♀️현재 활동중인 개발자 리스트:\");\nconsole.log(getActiveDevelopers(devTeam));\nconsole.log(\"👷‍♀️🦸‍♀️TypeScript 스킬을 가진 개발자 리스트:\");\nconsole.log(findBySkill(devTeam, Skill.TypeScript));\nconsole.log(\"👷‍♀️🦸‍♀️React 스킬을 가진 개발자 리스트:\");\nconsole.log(findBySkill(devTeam, Skill.React));\nconsole.log(\"👷‍♀️🦸‍♀️VueJS 스킬을 가진 개발자 리스트:\");\nconsole.log(findBySkill(devTeam, Skill.VueJs));\nconsole.log(\"👷‍♀️🦸‍♀️팀 매니저 정보:\");\nconsole.log(teamManager);\n// 중고급 개발자 필터링 함수 호출하여 결과 받기 /////\nconst seniorDevelopers = getSeniorDevelopers(devTeam, (dev) => dev.year >= 5);\nconsole.log(\"👷‍♀️🦸‍♀️중고급 개발자 리스트:\");\nconsole.log(seniorDevelopers);\n// 모든 개발자를 화면에 출력해 보자! ////////\n// -> 개발자 등급과 보너스도 출력하기\nconst devListContainer = document.getElementById('dev-list');\n// 개발자 목록 출력하기 /////\ndevTeam.map((dev) => {\n    // (1) 개발자 정보 출력을 위한 div 요소 생성\n    const devInfo = document.createElement('div');\n    // (2) 개발자 정보 div에 클래스 추가\n    devInfo.classList.add('dev-info');\n    // (3) 개발자 레벨과 보너스 정보 조회하기\n    const devBonus = getDevBonus(dev.year);\n    // (4) 개발자 정보 div에 HTML 추가\n    // -> 개발자 이름, 나이, 경력, 역할, 기술스택, 등급, 보너스\n    devInfo.innerHTML = `\r\n    <h3>👨‍🌾 Developer: ${dev.name}</h3>\r\n    <p>🎍 Age: ${dev.age}세</p>\r\n    <p>🎎 Year: ${dev.year}년차</p>\r\n    <p>🎡 Role: ${dev.role}개발자</p>\r\n    <p>🥽 Skills: ${dev.skills.join(', ')}</p>\r\n    <p>🥇 Level: ${devBonus.level}</p>\r\n    <p>📀 Bonus: ${devBonus.bonus.toLocaleString() + '만원'}</p>\r\n    <hr />\r\n  `;\n    devListContainer.appendChild(devInfo);\n}); ///// map //////\n"],"names":[],"sourceRoot":""}
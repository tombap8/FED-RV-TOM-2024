[ 리액트 SPA 앱 환경설정 초기셋팅 ]

-> 왜 노드JS인가?
(서버에서 작동하는 JS가 바로 노드JS다!)
-> 요즘 개발환경 대세임~!(성능좋고 결과확인 탁월하다!)

1. node.js 를 설치
https://nodejs.org/ko/download/
위의 주소는 공식홈페이지 다운로드 페이지임

-> 설치후 확인 폴더는 아래와 같다
C:\Program Files\nodejs

->>> 시스템 환경변수에 등록해준다!
PATH에 추가등록!
(노드설치시 자동등록된다! 그러나 확인필요!`)
예) C:\Program Files\nodejs 
-> 설치된 노드js위치를 등록후 재부팅필요!!!
-> 환경변수에 등록된다는 의미는 어느 위치에서 cmd명령어를
사용해도 해당 노드 명령어를 전역적으로 사용하도록 해준다!

####################################

[ ####### VSCODE에서 작업 ####### ]

1. cmd 명령어 사용하기

(1) 기본 명령어

    1) cd 명령어 (change directory)
        -> cd 폴더명 => 특정폴더이동
        -> cd ../ => 상위폴더이동(../다중사용가능!)
        -> cd / => 최상위이동
        -> cd 드라이브명:/ => 해당드라이브이동

    2) md 명령어 (make directory)
        -> md 폴더명 => 새폴더만들기

    3) del 명령어 (delete)
        -> del 존재하는폴더
        -> 명령어를 내리면 삭제 옵션을 물어봄(엔터치면 기본값 Y)
            [Y] 예(Y)  [A] 모두 예(A)  [N] 아니요(N)  
            [L] 모두 아니요(L)  [S] 일시 중단(S)  [?] 도움말

    4) cls 명령어 (clear) => 이전명령어 cmd창 지우기

    5) exit 명령어 => cmd창닫기
    
(2) VSCODE에서 터미널 열기 : ctrl+`(백틱)

    1) 처음에 열면 프로젝트 Root폴더부터 나옴

    2) 이때 기본 Powershell이 뜸 (구분법-터미널에 표시됨)
        Powershell안에서 cmd 사용법 -> 씨엠디 씨/ 벌 (cmd c/ ver)

    3) 불편하다면? 기본프로필을 변경하자!
    -> 터미널 옵션에서 "기본프로필" 선택후 상단창에서 Command Prompt 선택!
    -> 결과: Command Prompt(기본값) 으로 변경됨!


(참고: cmd와 Powershell은 CLI 인터페이스로 컴퓨터 초창기부터
있어온 명령어입력으로 컴퓨터기능을 수행하는 입력수단이다.
cmd가 처음부터 있었고 Powershell은 나중에 나와서 명령어를
더 폭넓게 사용할 수 있다. 다만 명령어 사용법이 좀 다르므로
간단한 설치나 실행 명령어는 cmd를 기반으로 사용하도록 한다!)


2. 작업할 폴더까지 이동한다!
-> cd 이동할 폴더명 (react-app까지 이동)
-> 더 쉽게! cd 명령어뒤에 폴더를 드래그함!(자동입력됨!)


3.npm 명령어 사용 - (node package manager)
-> 터미널의 Command Prompt 창에서 명령어를 입력한다!
(VSCODE에서 터미널은 ctrl+`(백틱)으로 연다!)
-> 처음에 열면 프로젝트 Root폴더부터 나옴

(1) 작업할 폴더까지 이동한다!
-> cd 이동할 폴더명 (react-app까지 이동)
-> 참고) cd 띄어쓰고 이동할 하위 폴더 드래그&드롭


(2) 기존에 리액트앱이 글로벌로 설치되었다면 삭제
npm uninstall -g create-react-app
(아래 3번 명령어 실행시 에러가 발생한다면 이 명령어로
기존 글로벌 리액트앱을 삭제한다!)

(3) 새로운 리액트 어플리케이션을 만든다!
(npx 명령어사용!)

npx create-react-app my-first-react-app
(my-react-app은 내가지은이름)

______________________________________________

(참고사항)

[ NPX (Node Package eXecute)란?]

((개요))
npx는 bin 형태로 배포되는 npm 패키지를 위한 툴
node.js를 설치하면 동시에 설치됨
npx { command } 방식으로 호출

((사용목적))
로컬 패키지에 설치된 모듈을 먼저 실행하고자 할때
자주 사용하지 않는 명령어에게 오염되지 않고자 할때

((프로세스))
npx는 npm 과 달리 버전 선택하지 않아도 
최신버전의 리액트 모듈을 설치해 준다!
(버전이 상이해서 생기는 문제를 막아준다!)

((정리))
npx는 우선적으로 로컬 프로젝트 실행파일을 찾음
로컬 프로젝트에 없으면 최신 버전의 모듈을 설치후
전역에서 실행함
________________________________________________
4. 이미 만들고 깃허브에서 연결하였다면...
만약 package.json파일에서 
"dependencies"항목에
react와 react-dom이 없다면
해당 소스까지 들어와서 react와 react-dom을 설치한다!

npm i react react-dom


5. 해당어플위치에서 npm을 스타트한다
npm start
-> 종료는 ctrl+c (close의 c) 종료질문에 y로 답한다!

###################################################
-> 5번의 결과로 브라우저에 가상서버가 뜨고 
http://localhost:3000/
위의 주소로 테스트 환경의 브라우저가 구동한다!
새로고침 없이 계속 변경된 소스와 에러시 메시지를 리턴함!
####################################################


6. 라우터 기능사용시 추가설치
npm i react-router-dom
최신라우터 업그레이드는 아래 코드
npm i react-router-dom@latest

7. 부트스트랩 추가 설치
npm install react-bootstrap bootstrap

8. 제이쿼리 추가설치
npm install jquery
또는 npm i jquery (--save)

사용:
import $ from 'jquery';

9. 제이쿼리 UI 추가설치
npm i jquery-ui-dist
사용:
import 'jquery-ui-dist/jquery-ui';

10. 제이쿼리 UI 드래그기능 
모바일까지 커버하기 위해 터치펀치 설치
npm i jquery-ui-touch-punch

사용: 
-> 아래처럼 제이쿼리 $외에 jQuery함수명도 사용가능하게 써줄것!
아래처럼 안쓰면 jQuery is not defined... 에러남
그리고 뒤에 제이쿼리 UI와 터치펀치는 import로 불러오지 말고
require() 메서드로 불러와야 효과있음!

import $ from 'jquery';
window.jQuery = $;
require('jquery-ui-dist/jquery-ui');
require('jquery-ui-touch-punch/jquery.ui.touch-punch');


11. 사스(Sass)를 사용하기 위한 설치
npm i sass

-> 설치후 컴포넌트 파일에서 import "사스파일.scss"로 불러오면
css 변환없이 바로 사스 코딩을 적용할 수 있다!!!^^
빌드시 소스에 본 CSS파일로 변환해 준다!






______________________________________________
참고) 
설치 명령어에서 설치시 install은 줄여서 i만 써도 됨
그리고 뒤에 설치 옵션 --save는 예전과 달리 이젠 안써도 
json파일에 설치등록을 해준다는게 기본이므로
안써도 --save쓴것과 같음


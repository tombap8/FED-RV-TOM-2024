[ 타임아웃 실행분석 : Javascript 처리원리 ]

1. 이벤트 발생 순서
여러개의 이벤트가 한번에 동시 다발적으로 
발생한다면 어떤 순서대로 실행될까? 
이벤트 처리 순서를 살펴보기 위해 필요한 개념들은 아래와 같다!

1-1. 콜스택(Call Stack)
자바스크립트 코드 실행 중, 함수가 호출될 경우 해당 함수는 실행 순서대로 콜스택에 쌓이게(push)된다.
이후 함수의 실행이 완료되면 스택에서 제거(pop)된다.

1-2. 태스크 큐(Task Queue)
태스크 큐에는 이벤트 핸들러, setTimeout 등의 함수들이 Call Stack으로 이동되기 전 보관되는 곳이다.

1-3. 이벤트 루프(Event Loop)
실행할 함수(콜백)들을 관리한다. 콜스택에 실행 중인 함수가 있는지 확인하고, CallStack이 비었다면 태스크 큐에 대기중인 함수들을 CallStack으로 이동시킨다.

************************************
2. 기본개념 (자료구조)

2-1. 스택 (Stack)

리스트의 한쪽 끝에서 수행 되는 선형 리스트
한가지 형태로서 스택의 작업에는 삽입(push), 
삭제(pop)
LIFO(Last In Frist Out) 스택에 마지막으로
입력된 자료가 제일 먼저 삭제 하는 방식


2-2. 큐(Queue)

큐는 여려개의 데이터 항목을 일정한 순서대로 
나열 하는 형태로 push(입력), pop(삭제) 작동

FIFO(Frist In Frist OUT) 선입선출 방법으로
가장 먼저 데이터에 대해서 삭제 하는 방법

********************************

3. 결론

setTimeout() 과 같은 타이밍 함수는 스택에서 코드가
순서대로 바로 처리되지 않고 스택이 비워질때까지
기다렸다가 (큐에서 대기함) 스택이 비워지면
스택으로 이 명령어를 넘겨서 실제 처리가 이루어진다!
그래서 기존 처리 실행문 보다 나중에 따로 처리하고자할
경우 JS에 많이 사용하는 함수가 된다!

-> 기본적으로 Javascript는 처리방식이 싱글 스레드다!
즉, 처리하는 머리가 하나뿐이다! (반대는 멀티 스레드)
하나뿐이므로 순서를 정해서 처리하는 것이 기본이 된다!
처리가 막히는 현상(블록킹현상:blocking)을 피하기위해
병렬처리를 위한 방식이라고 이해하면 되겠다!!!
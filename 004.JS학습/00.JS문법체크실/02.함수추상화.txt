[ 01.함수의 추상화 순서 ]

1. 기존 하나만 구현한 저 수준의 함수를 하나의 함수로
감싸서 호출시 실행하도록 만든다! (이것을 추상화함수라고 부르자!)

2. 이때 메인 함수를 호출하는 셋업 함수를 하나더 만들고
이 함수를 외부에 노출한다! 이 셋업 함수는 추상화함수를 호출한다!

3. 또한 셋업 함수는 대상을 클래스이름으로 받아서 처리하게끔
자체적으로 클래스 요소를 HTML 컬렉션으로 만든후
forEach 메서드로 요소의 개수만큼 추상화함수를 호출한다!

4. 유일한 점은 루트 대상요소 하위의 구현내용은 모두
상대적으로 구현해야한다는 점이다! 예컨데 슬라이드 요소를
보내서 기능처리시 하위의 이동버튼이나 블릿버튼의 클래스명은
슬라이드 요소 하위의 요소로 선택해야한다!

______________________________________

[ 함수의 추상화란? ]
(함수의 추상화 또는 함수의 고도화 또는 함수의 모듈화)

추상화는 코드를 보다 모듈화되고 재사용 가능하며 
이해하기 쉽게 만드는 프로그래밍의 강력한
도구다. 복잡한 작업을 더 작고 관리하기 쉬운 함수로 나누고 
map, reduce, filter와 같은 고차 함수를 활용하면 코드를 
단순화하고 더 우아하게 만들 수 있다. 자바스크립트에서는 표현력이 
풍부하고 읽기 쉬운 방식으로 함수형 코드를 작성할 수 있기 때문에 
이 장점을 더 잘 살릴 수 있다.
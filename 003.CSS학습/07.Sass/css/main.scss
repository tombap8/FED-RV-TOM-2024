// 메인 Sass : main.scss

// 사스 주석문
// 주석1
/* 주석2 */

/********************************************* 
    [ 사스 핵심 사용법 ]

    1. 사스 확장자별 파일구분
        (1) .scss - 사스관리파일
            (-> .sass 확장자는 중괄호,세미콜론 사용하지않는
            문법 사스파일임. 우리는 scss파일을 사용할 것임)
        (2) .css.map - 사스파일과 CSS연결정보 파일
        (3) .css - 실제로 적용되는 컴파일된 CSS

    2. 사스파일 컴파일하기
        ->Live Sass Compiler 확장프로그램 설치후
        하단 "Watch Sass" 클릭하여 작동시킴

        -> 에러가 없는한!!! 컴파일하여 같은 이름의
        css파일을 생성함 "Watching..."상태가됨.
        다시클릭시 실시간 변환상태가 꺼진다.

        -> 에러 발생시 컴파일이 안되고 cmd창에
        에러메시지가 나온다!

    3. 주요 문법
    (1) 네스팅 기법 
        - 선택자 중괄호안에 다른 하위선택을 하는것!
        예) div{h1{color:red;}}
        -> 장점: 같은 셋팅요소를 선택시 중복된
        선택자의 반복을 하지 않아도 된다!
        또한 같은 구성요소를 묶어서 셋팅 관리가능!

    (2) 속성접두어 묶음기법
        - 반복되는 같은 종류의 하위속성의 접두어를
        한번만 사용하여 셋팅을 묶어주는 방법
        예) font: {size:12px; weight:bold;}

    (3) 변수사용기법
        - 동일하게 사용할 값을 변수에 넣고 디자인을 배치함
        - 변수사용법-> $변수명: 값
        - 변수명은 모두 붙여쓰며 구분단어는
        캐믈케이스(camelCase) 또는 
        캐밥케이스(camel-case)를 사용한다
        - 변수의 범위는 변수를 선언후 하위로 상속되어 값이유지됨

    (4) 파일 분리기법 : @import
        - 부분파일을 분리하여 공통모듈로 합쳐서 사용한다!
        - 부분파일명은 사스에서 앞에 언더바를 붙여서 사용하는것이
        원칙이지만 언더바를 안써도 기본적으로 부분파일처리해줌!
        - 파일호출시 확장자 생략가능함! 
        (자동으로 앞에 언더바와 확장자를 생략해준다!)
        예) @import "reset";
        - 일반 CSS @import 와는 다른점은 http요청을 하지 않음

    (5) 믹스인 : 일종의 공통 CSS코드를 리턴하는 함수
        1) 셋팅형식

        [1] 전달변수가 없는 믹스인
        @mixin 믹스인이름 {CSS코드}

        [2] 전달변수가 있는 믹스인
        @mixin 믹스인이름(변수) {CSS코드}

        [3] 전달변수가 있고 기본값도 있는 믹스인
        @mixin 믹스인이름(변수:기본값) {CSS코드}

        2) 믹스인 호출방법 : 믹스인을 포함하라!(@include)
        -> @include 믹스인이름;
        -> @include 믹스인이름(전달값);

    (6) 네스팅 이어붙이기 기법(&)
        - 가상요소, 가상클래스, 특정클래스를
            현재 선택요소에 셋팅하는 방법임!
        - &(앰퍼센드)는 현재 선택요소 자신을 가리킴!
 
    (7) 반복코드 확장 : @extend (extend는 연장하다,확장하다)
        1) 사용이유 : 반복되는 같은 셋팅의 클래스를 쉽게 도입한다
        2) 사용방법 : 선택자 코드 안에 (@extend 클래스명) 형식
        3) 공통코드 외에 다른 셋팅속성은 하단에 추가로 구현한다!
        4) 장점 : 공통코드 적용을 위해 각 요소에 클래스를 일일히
        주지 않아도 공통코드를 적용할 수 있다!



*********************************************/
// 변수 셋팅 sass 불러오기
@import "./data/variables";

// 초기화 셋팅 sass 불러오기
@import "./common/reset";
// 주의: 파일선택후 실제로 부분파일 앞에 언더바와
// 뒤에 scss 확장자는 사라진다!(안써도됨!)

// @mixin 셋팅하기 ///////////////////
// (1) 타이틀 디자인 믹스인
// @mixin title-text { -> 전달변수없는 경우
// @mixin title-text($selColor) { -> 전달변수있는 경우
@mixin title-text($selColor: red, $icon: "🏀") {
  //->기본값 주기
  color: $selColor;
  // [ 속성접두어 묶음기법 ]
  font: {
    size: $fontSize1;
    family: "Times New Roman";
  }
  text: {
    align: center;
    decoration: underline;
    underline-offset: 10px;
    shadow: 5px 5px 4px #0000007d;
  }
  // 가상요소 아이콘 넣기
  &::before {
    content: $icon;
  }
}

// 전체 페이지 요소
.wrapper {
  max-width: 1000px;
  margin: 0 auto;
}

// 상단영역
.top-area {
  // 박스 글자
  color: $mainColor1;
  //[ 네스팅 기법 ]
  h1 {
    // 타이틀 믹스인 호출
    @include title-text($orgAqua, "🎎");
    // @include 믹스인이름;

    // 하단마진
    margin-bottom: $fontSize1;

    // 배경설정
    background: {
      color: $mainColor1-2;
      image: url(../images/flower.png);
      position: center;
      repeat: repeat-x;
      size: 70px;
    }

    // 패딩
    padding: 20px;
  }
  // 서브 타이틀 박스
  h2 {
    // 자식span의 부모자격
    position: relative;
    font-size: $fontSize3;
    // 박스공통설정
    @extend .box-basic;
    // text-align: center;
    // padding: 20px 0;

    // 원모양 4개의 span ///
    span {
      position: absolute;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      // background-color: #000;

      // 각 span위치잡기
      @for $i from 1 through 4 {
        &:nth-of-type(#{$i}) {
          @if ($i==1 or $i==2) {
            top: -40px;
          }
          @if ($i==3 or $i==4) {
            bottom: 0;
          }
          @if ($i==1 or $i==3) {
            left: 0;
          }
          @if ($i==2 or $i==4) {
            right: 0;
          }
        }
      }
      // &:nth-of-type(1) {
      //   top: 0;
      //   left: 0;
      // }
      // &:nth-of-type(2) {
      //   top: 0;
      //   right: 0;
      // }
      // &:nth-of-type(3) {
      //   bottom: 0;
      //   left: 0;
      // }
      // &:nth-of-type(4) {
      //   bottom: 0;
      //   right: 0;
      // }
    }
  }
}

// 상단영역의 span원모양 색상 @each 제어문으로 넣기
// 사용할 셋팅값은 객체형변수인 $colors를 사용함
@each $key, $val in $colors {
  .#{$key}-circle {
    background-color: $val;
  }
}
// #{}자리에 변수가 들어가서 속성이 할당됨!
// $key, $val은 순서대로 앞에것이 속성, 뒤엣것이 값 이 들어옴!

// 메인 영역 //////////
.main-area {
  // 내부박스 section
  section {
    // 테두리
    border: {
      color: blue;
      style: dashed;
      width: 7px;
    }
    margin-bottom: 20px;
    padding: 20px;

    // 타이틀 h3
    h3 {
      // 타이틀 믹스인 호출
      @include title-text(navy);
    }
    // 리스트, 문단 디자인
    ul,
    ol,
    p {
      line-height: 2;
      font-size: 24px;
      // 하위 li요소
      li {
        text: {
          decoration: underline;
          // 언더라인 하단 간격 셋팅
          underline-offset: 10px;
          decoration-thickness: 5px;
          decoration-color: $mainColor2;
          align: center;
        }
        // 배경색 노란색
        background-color: #ff0;

        // [ 네스팅 이어붙이기 기법(&) ]
        &:first-child {
          color: orchid;
          font-weight: bold;
          font-size: $fontSize3;
          // 글자그림자로 글자테두리넣기
          text-shadow: 1px 0 #000, -1px 0 #000, 0 1px #000, 0 -1px #000;
        }
        // 두번째 li요소부터 5번째까지 앞뒤 보더넣기
        @for $i from 2 to 6 {
          // to는 끝수 불포함
          &:nth-child(#{$i}) {
            border-left: ($i * 20px) solid red;
            border-right: ($i * 20px) solid red;
          }
        }
        // 변수구역인 #{}는 선택자부분, CSS속성부분에 사용
        // 값부분에 사용시엔 변수를 그대로 쓸 수 있다!

        // 가상요소 블릿넣기
        &::before {
          content: "😘";
        }
      }
    }
  }
}

// 일반 박스 디자인
.box-basic {
  // 중앙정렬
  text-align: center;
  // 위아래 패딩
  padding: 20px 0;
}
// 위의 일반 박스 디자인 공통 클래스를
// 원하는 박스에 @extend로 적용하자!

// 버튼박스
.button-box {
  // 기본박스 클래스 적용하기
  @extend .box-basic;
}
// 최하단박스
.bottom-title {
  // 기본박스 클래스 적용하기
  @extend .box-basic;
  // 믹스인 타이틀 공통 디자인 불러오기
  @include title-text(darkred, "🥽");
  // -> 글자 색상을 안보내면 기본설정색적용
  // 추가디자인
  margin-bottom: 50px;
}

// 디자인 구성요소중 공통디자인을
// 가져와서 넣기 -> @extend .클래스명

// 더보기 버튼 디자인
.button-basic {
  display: inline-block;
  border: 1px solid #222;
  border-radius: 20px;
  padding: 15px 30px;
  font-size: 20px;
  cursor: pointer;
  margin-left: 20px;

  // 마우스오버시
  &:hover {
    background-color: hotpink;
    text: {
      decoration: overline;
      decoration-style: wavy;
    }
  }

  // 별도의 클래스는 다르게 적용
  &.my {
    text: {
      decoration: underline;
      decoration-style: dotted;
      underline-offset: 10px;
      decoration-thickness: 5px;
    }
  }
}

// 제출하기 버튼 디자인
.button-report {
  // 기본 버튼 디자인 클래스 가져오기
  @extend .button-basic;
  // 기본과 다른 디자인 덮어쓰기
  background-color: orange;
  color: #fff;
}

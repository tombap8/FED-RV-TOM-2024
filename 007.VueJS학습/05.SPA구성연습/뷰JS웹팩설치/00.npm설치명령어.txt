[ npm 설치명령어 ]
참고) https://docs.npmjs.com/cli/v9/commands/npm-install

npm install이란?
./node_modules폴더에 패키지를 다운받아 설치하기 위한 명령어

npm install
// package.json의 dependencies에 있는 모든 패키지를 설치한다.
// 처음 프로젝트를 세팅했다면 이 명령어로 패키지를 설치하고 개발을 시작하면 된다.

npm i
// npm install 의 줄인 명령어. 

npm install [package]
// 현재 작업중인 디렉토리 내에 있는 ./node_modules에 [package]를 설치한다. 
// (예: npm install moment) -> ./node_modules에 moment 패키지를 설치 함

npm install [package] --save
// [package]를 설치 하면서 package.json파일에 있는 dependencies 객체에 
지금 설치한 패키지 정보를 추가

npm install [package] --save -dev
// --save옵션과 같이 package.json파일에 의존성 내용을 추가하지만
// dependencies가 아닌 devDepenencies 객체에 추가
// 줄여쓰기 : npm i -D  [package]

npm install [package] --no-save
// dependencies에 패키지 정보를 추가하지 않는다.

npm install [package] --save-exact
// 정확히 일치하는 버전의 패키지를 추가

npm install [package] --save-bundle
// 해당 패키지를 bundleDependencies에 추가

npm install [package] --force
// 해당 패키지가 존재하더라도 원격 저장소에 있는 패키지를 가져온다.



************************************************
[ npm 옵션 정리 ]

npm install [패키지명] <옵션>
npm i [패키지명] <옵션>
-P 또는 --save-dev
패키지를 설치하고 package.json의 dependencies목록에 추가된다.
이 옵션은 사용하지 않아도 기본으로 dependencies에 적용된다.

-D 또는 --save-dev
패키지를 설치하고 package.json의 devDependencies목록에 추가된다.

💡 dependencies: 실제 코드에 포함되어 앱 구동시 필요한 패키지
devDependencies: 실제 코드에 포함되지 않고, 개발 단계에만 필요한 패키지
--production으로 빌드하면 devDependencies패키지들은 포함되지 않음.

-g
패키지를 현재 프로젝트가 아닌 시스템의 node_modules에 설치한다.
프로젝트에서 사용할 수는 있지만 package.json파일에 추가되지 않음.

💡npm root -g 명령어로 시스템 경로를 확인할 수 있다.

-E 또는 --save-exact
버전명을 명시한 경우 버전이 정확히 일치하는 패키지를 받는다.

--no-save
패키지 설치는 하되 dependencies에 추가하지 않는다.

--force
이미 패키지가 설치되어 있어도 원격저장소에 새로 설치한다

********************************
package.json 의존성을 설치할 때
npm install <옵션>
npm i <옵션>

다른 프로젝트의 패키지를 내려받았을 경우(git clone 처럼) 설치할 때는 
패키지명 없이 npm install만 하면 필요한 패키지를 모두 내려받는다.

npm install --production
package.json에서 devDependencies 목록에 있는 패키지는 제외하고 설치한다.

만약, 노드의 NODE_ENV 환경변수에 production이 set 되어 있는 경우 
모든 패키지를 받고싶으면 --production=false 옵션으로 
prod와 dev패키지를 모두 받을 수 있다.